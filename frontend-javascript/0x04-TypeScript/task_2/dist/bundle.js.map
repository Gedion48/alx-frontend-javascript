{"version":3,"file":"bundle.js","mappings":";;;;;;AAcA,sCAAsC;AACtC,SAAS,cAAc,CAAC,MAAc;IACpC,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;QACjB,OAAO;YACL,SAAS,EAAE,MAAM;YACjB,QAAQ,EAAE,KAAK;YACf,gBAAgB,EAAE,IAAI;YACtB,QAAQ,EAAE,QAAQ;YAClB,iBAAiB,EAAE,CAAC;SACrB,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,OAAO;YACL,SAAS,EAAE,MAAM;YACjB,QAAQ,EAAE,OAAO;YACjB,gBAAgB,EAAE,IAAI;YACtB,QAAQ,EAAE,QAAQ;YAClB,eAAe,EAAE,CAAC;SACnB,CAAC;IACJ,CAAC;AACH,CAAC;AAED,kDAAkD;AAClD,SAAS,UAAU,CAAC,QAA4B;IAC9C,OAAQ,QAAqB,CAAC,eAAe,KAAK,SAAS,CAAC;AAC9D,CAAC;AAED,qBAAqB;AACrB,SAAS,iBAAiB;IACxB,OAAO,2BAA2B,CAAC;AACrC,CAAC;AAED,SAAS,gBAAgB;IACvB,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED,sCAAsC;AACtC,SAAS,WAAW,CAAC,QAA4B;IAC/C,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;QACzB,OAAO,iBAAiB,EAAE,CAAC;IAC7B,CAAC;SAAM,CAAC;QACN,OAAO,gBAAgB,EAAE,CAAC;IAC5B,CAAC;AACH,CAAC;AAED,kBAAkB;AAClB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAG,kBAAkB;AACnE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE,4BAA4B","sources":["webpack://task_2/./js/main.ts"],"sourcesContent":["interface Teacher {\r\n  firstName: string;\r\n  lastName: string;\r\n  fullTimeEmployee: boolean;\r\n  location: string;\r\n  yearsOfExperience?: number;\r\n  // Any other teacher-specific properties\r\n  [key: string]: any;\r\n}\r\n\r\ninterface Director extends Teacher {\r\n  numberOfReports: number;\r\n}\r\n\r\n// Factory function to create employee\r\nfunction createEmployee(salary: number): Teacher | Director {\r\n  if (salary < 500) {\r\n    return {\r\n      firstName: \"John\",\r\n      lastName: \"Doe\",\r\n      fullTimeEmployee: true,\r\n      location: \"London\",\r\n      yearsOfExperience: 1,\r\n    };\r\n  } else {\r\n    return {\r\n      firstName: \"Jane\",\r\n      lastName: \"Smith\",\r\n      fullTimeEmployee: true,\r\n      location: \"London\",\r\n      numberOfReports: 5,\r\n    };\r\n  }\r\n}\r\n\r\n// Type predicate to check if employee is Director\r\nfunction isDirector(employee: Teacher | Director): employee is Director {\r\n  return (employee as Director).numberOfReports !== undefined;\r\n}\r\n\r\n// Functions for work\r\nfunction workDirectorTasks(): string {\r\n  return \"Getting to director tasks\";\r\n}\r\n\r\nfunction workTeacherTasks(): string {\r\n  return \"Getting to work\";\r\n}\r\n\r\n// Execute work based on employee type\r\nfunction executeWork(employee: Teacher | Director): string {\r\n  if (isDirector(employee)) {\r\n    return workDirectorTasks();\r\n  } else {\r\n    return workTeacherTasks();\r\n  }\r\n}\r\n\r\n// Testing output:\r\nconsole.log(executeWork(createEmployee(200)));   // Getting to work\r\nconsole.log(executeWork(createEmployee(1000)));  // Getting to director tasks\r\n"],"names":[],"sourceRoot":""}